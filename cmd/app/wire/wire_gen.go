// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/daniilsolovey/transaction-management-system/internal/pkg/grpcserver"
	"github.com/daniilsolovey/transaction-management-system/internal/repository/postgres"
	"github.com/daniilsolovey/transaction-management-system/internal/repository/redis"
	"log/slog"
)

// Injectors from wire.go:

func Initialize() (*Service, func(), error) {
	logger := ProvideLogger()
	repository, err := ProvidePostgres(logger)
	if err != nil {
		return nil, nil, err
	}
	redisRepository, err := ProvideRedis(logger)
	if err != nil {
		return nil, nil, err
	}
	server, err := ProvideRPCServer()
	if err != nil {
		return nil, nil, err
	}
	service := &Service{
		Postgres:  repository,
		Redis:     redisRepository,
		RPCServer: server,
		Logger:    logger,
	}
	return service, func() {
	}, nil
}

// wire.go:

type Service struct {
	Postgres  *postgres.Repository
	Redis     *redis.Repository
	RPCServer *grpcserver.Server
	Logger    *slog.Logger
}
